Graphs:

Terms:
Nodes (or vertices): Plot point, having zero or more adjacent elements.
Edge: The connection between two nodes.
Degree: is the number of edges connected to a vertex

Types:
Directed: only one pathway/direction  e.g. IG followers go one way
Undirected: bi-directional e.g. Facebook, you are both friends with one another
Weighted: edges have value/cost. There is data stored in the edge. e.g. the miles between two cities on a map
    - Absent a value, an edge's value is 1.

Cycle or self-loop: an edge which points back on itself. e.g. a flight that departed an airport, but had to turn around due to complications.
    - A graph can have cycles, which means you could get the same node more than once. The graph without cycles is called acyclic graph.
    - Also, acyclic undirected graphs are called tree.
    ex: https://adrianmejia.com/images/cyclic-vs-acyclic-directed-graph.jpg 


Representing Graphs: 2 Primary Way in javascript
1. Adjacency List
    - Adjacency List is one of the most common ways to represent graphs. Each node has a list of all the nodes connected to it.

      Graphs can be represented as an adjacency list using an Array (or HashMap) containing the nodes. Each node includes a list (Array, linked list, set, etc.) that lists its adjacent nodes. This is preferable to a matrix that may be very sparse, and therefore take up a lot more time and resources to navigate. 
      Ex: https://adrianmejia.com/images/digraph.png
      Accompanying adjacency list:  a -> { a, b }
                                    b -> { c }
                                    c -> { d }
                                    d -> { b, c }

2. Adjacency Matrix
    - The adjacency matrix is one way of representing a graph using a two-dimensional array (NxN matrix). In the intersection of nodes, we add 1 (or other weight) if they are connected and 0 or - if they are not connected.  
    Ex: https://adrianmejia.com/images/digraph.png
        Accompanying adjacency matrix :   a b c d e
                                        a 1 1 - - -
                                        b - - 1 - -
                                        c - - - 1 -
                                        d - 1 1 - -


Traversing Graphs:

Breadth-first Search (BFS): is an algorithm for searching a tree data structure for a node that satisfies a given property. It starts at the tree root and explores all nodes at the present depth prior to moving on to the nodes at the next depth level. Extra memory, usually a queue, is needed to keep track of the child nodes that were encountered but not yet explored.

Ex: https://en.wikipedia.org/wiki/Breadth-first_search#/media/File:Breadth-first-tree.svg

Depth-first search (DFS): is an algorithm for traversing or searching tree or graph data structures. The algorithm starts at the root node (selecting some arbitrary node as the root node in the case of a graph) and explores as far as possible along each branch before backtracking.

Ex: https://en.wikipedia.org/wiki/Depth-first_search#/media/File:Depth-first-tree.svg

